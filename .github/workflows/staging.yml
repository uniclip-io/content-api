name: Staging CI Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Restore packages
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-restore --verbosity normal

  aws:
    needs: build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push Image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: uniclip/content-api
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:staging -f ContentApi/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:staging

      - name: Stop old task
        run: |
          TASK_ARN=$(aws ecs list-tasks --cluster ${{ secrets.AWS_CLUSTER_STAGING }} --service-name ${{ secrets.AWS_SERVICE_STAGING }} --desired-status RUNNING --query 'taskArns[0]' --output text)
          if [ ! -z "$TASK_ARN" ]; then
            echo $TASK_ARN 
            aws ecs stop-task --task $TASK_ARN --cluster ${{ secrets.AWS_CLUSTER_STAGING }}
          fi

      - name: Run new task
        run: |
          aws ecs update-service --cluster ${{ secrets.AWS_CLUSTER_STAGING }} --service ${{ secrets.AWS_SERVICE_STAGING }} --force-new-deployment --task-definition ContentApiTask-S
